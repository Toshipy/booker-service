service: search-api
provider:
  name: aws
  runtime: python3.9
  region: ap-northeast-1
  environment:
    OPENSEARCH_ENDPOINT: ${env:OPENSEARCH_ENDPOINT}
    OPENSEARCH_USERNAME: ${env:OPENSEARCH_USERNAME}
    OPENSEARCH_PASSWORD: ${env:OPENSEARCH_PASSWORD}
    OPENSEARCH_DOMAIN_NAME: ${env:OPENSEARCH_DOMAIN_NAME}
    IAM_USER_NAME: ${env:IAM_USER_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - Fn::GetAtt: [BooksTable, Arn]
        - Effect: Allow
          Action:
            - es:ESHttp*
          Resource:
            - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${self:provider.environment.OPENSEARCH_DOMAIN_NAME}"
            - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${self:provider.environment.OPENSEARCH_DOMAIN_NAME}/*"
package:
  individually: true 
  patterns:
    - '!**'
    - 'requirements.txt'
functions:
  api:
    handler: src.main.handler
    package:
      include:
        - src/main.py
        - src/schemas.py
        - src/utils.py
    events:
      - httpApi:
          path: /docs
          method: get
      - httpApi:
          path: /openapi.json
          method: get
      - httpApi:
          path: /search
          method: get
      - httpApi:
          path: /books
          method: ANY
      - httpApi:
          path: /{proxy+}
          method: ANY
    layers:
      - Ref: PythonRequirementsLambdaLayer
  syncToOpensearch:
    handler: src.dynamodb_stream.handler
    package:
      include:
        - src/dynamodb_stream.py
        - src/schemas.py
        - src/utils.py
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [BooksTable, StreamArn]
    layers:
      - Ref: PythonRequirementsLambdaLayer
resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Books
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    OpenSearchDomain:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: ${self:provider.environment.OPENSEARCH_DOMAIN_NAME}
        ClusterConfig:
          InstanceCount: 1
          InstanceType: t3.small.search
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        EBSOptions:
          EBSEnabled: true
          VolumeSize: 10
          VolumeType: gp2
        EncryptionAtRestOptions:
          Enabled: true
        NodeToNodeEncryptionOptions:
          Enabled: true
        DomainEndpointOptions:
          EnforceHTTPS: true
          TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
        AdvancedSecurityOptions:
          Enabled: true
          InternalUserDatabaseEnabled: true
          MasterUserOptions:
            MasterUserName: ${self:provider.environment.OPENSEARCH_USERNAME}
            MasterUserPassword: ${self:provider.environment.OPENSEARCH_PASSWORD}
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: "es:*"
              Resource:
                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${self:provider.environment.OPENSEARCH_DOMAIN_NAME}"
                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${self:provider.environment.OPENSEARCH_DOMAIN_NAME}/*"
plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
    layer: true
    zip: true
